grobs_df$gPath_full <- gsub(pattern = "layout::",
replacement = "",
x = grobs_df$gPath_full,
fixed = TRUE)
# Get the gPaths of the strip background grobs
strip_bg_gpath <- grobs_df$gPath_full[grepl(pattern = ".*strip\\.background.*",
x = grobs_df$gPath_full)]
strip_bg_gpath[1]
strip_txt_gpath <- grobs_df$gPath_full[grepl(pattern = "strip.*titleGrob.*text.*",
x = grobs_df$gPath_full)]
strip_txt_gpath[1] # example of a gPath for strip title
## [1] "strip-t-1.7-5-7-5::strip.1-1-1-1::GRID.titleGrob.5368::GRID.text.5364"
# Generate some color
n_cols <- length(strip_bg_gpath)
fills <- c("#FFC000", "#5B9BD5")
# Edit the grobs
for (i in 1:length(strip_bg_gpath)){
g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i]))
}
# Draw the edited plot
grid.newpage(); grid.draw(g)
plot_Reak <- g
ggsave(filename = "data/results/figures/ReactionToWarning.png", g,
dpi = 500, width = 6, height = 3, units = "in", device='png', bg = "transparent")
## remove not needed data ##
rm(list = setdiff(ls(), c("vorbefragung", "nachbefragung", "nach_L2only",
"fun_mean", "fun_median", "mean_Sim", "Sim_skim",
"plot_TiA_all_scales", "TiA",
"plot_CTAM_all_scales", "CTAM",
"plot_NDRT_all_scales", "NDRT",
"plot_L2components", "L2compo",
"plot_monitoring",
"plot_setting",
"Warn", "plot_Warn",
"Reak", "plot_Reak")))
################## sample characteristics ###########################################################
#### plot age ####
plot_age <- ggplot(vorbefragung, aes(x = group, y=Alter, fill = group)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(20,80), breaks = seq(20,80,10)) +
scale_fill_manual(values = c("#FFC000", "#5B9BD5", "#E7E6E6")) +
labs(y="Age in years") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_age
ggsave(filename = "data/results/figures/Age.png", plot_age,
dpi = 500, width = 3, height = 3, units = "in", device='png', bg = "transparent")
rm(list = setdiff(ls(), c("vorbefragung", "nachbefragung", "nach_L2only", "fun_mean", "fun_median", "mean_Sim", "Sim_skim",
"plot_TiA_all_scales", "TiA",
"plot_CTAM_all_scales", "CTAM",
"plot_NDRT_all_scales", "NDRT",
"plot_L2components", "L2compo",
"plot_monitoring",
"plot_setting",
"Warn", "plot_Warn",
"Reak", "plot_Reak",
"plot_age")))
#### plot driver's license ####
plot_license <- ggplot(vorbefragung, aes(x = group, y=Fuehrerschein, fill = group)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(1960,2020), breaks = seq(1960,2020,10)) +
scale_fill_manual(values = c("#FFC000", "#5B9BD5", "#E7E6E6")) +
labs(y="Year - obtainment of driver's license") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_license
ggsave(filename = "data/results/figures/License.png", plot_license,
dpi = 500, width = 3, height = 3.5, units = "in", device='png', bg = "transparent")
rm(list = setdiff(ls(), c("vorbefragung", "nachbefragung", "nach_L2only", "fun_mean", "fun_median", "mean_Sim", "Sim_skim",
"plot_TiA_all_scales", "TiA",
"plot_CTAM_all_scales", "CTAM",
"plot_NDRT_all_scales", "NDRT",
"plot_L2components", "L2compo",
"plot_monitoring",
"plot_setting",
"Warn", "plot_Warn",
"Reak", "plot_Reak",
"plot_age",
"plot_license")))
#### plot DSQ ####
## subsets ##
DSQ_Speed <- vorbefragung %>%
select(group, VPNr, DSQ_Speed) %>%
rename(score = DSQ_Speed) %>%
add_column(scale = "DSQ_Speed", .after = "VPNr")
DSQ_Calmness <- vorbefragung %>%
select(group, VPNr, DSQ_Calmness) %>%
rename(score = DSQ_Calmness) %>%
add_column(scale = "DSQ_Calmness", .after = "VPNr")
DSQ_SocialResistance <- vorbefragung %>%
select(group, VPNr, DSQ_SocialResistance) %>%
rename(score = DSQ_SocialResistance) %>%
add_column(scale = "DSQ_SocialResistance", .after = "VPNr")
DSQ_Focus <- vorbefragung %>%
select(group, VPNr, DSQ_Focus) %>%
rename(score = DSQ_Focus) %>%
add_column(scale = "DSQ_Focus", .after = "VPNr")
DSQ_Planning <- vorbefragung %>%
select(group, VPNr, DSQ_Planning) %>%
rename(score = DSQ_Planning) %>%
add_column(scale = "DSQ_Planning", .after = "VPNr")
DSQ_Deviance <- vorbefragung %>%
select(group, VPNr, DSQ_Deviance) %>%
rename(score = DSQ_Deviance) %>%
add_column(scale = "DSQ_Deviance", .after = "VPNr")
## build subset ##
DSQ <- bind_rows(DSQ_Speed, DSQ_Calmness, DSQ_SocialResistance, DSQ_Focus, DSQ_Planning, DSQ_Deviance) %>%
mutate(scale = factor(scale, levels = c("DSQ_Speed", "DSQ_Calmness", "DSQ_SocialResistance", "DSQ_Focus", "DSQ_Planning", "DSQ_Deviance"), ordered = TRUE))
## lables ##
labels_DSQ = c("Speed", "Calmness", "Social Resistance",
"Focus", "Planning", "Deviance")
## basic plot ##
p <- ggplot(DSQ, aes(x=scale, y=score, fill=scale)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_x_discrete(labels = labels_DSQ) +
scale_y_continuous(limits = c(2,18), breaks = seq(2,18,2)) +
facet_wrap(~group) +
scale_fill_manual(values = c("#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE")) +
labs(y="Score", x="") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
legend.position = "none",
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.text.x=element_text(color = "black", size=9, angle=20, vjust=.88, hjust=0.8, face = "plain"),
axis.text.y=element_text(color = "black", size=9, face = "plain")) +
geom_segment(aes(x = 0.6, y = 18, xend = 1.4, yend = 18), linetype = 2) + # speed
geom_segment(aes(x = 0.6, y = 3, xend = 1.4, yend = 3), linetype = 2) +
geom_segment(aes(x = 1.6, y = 18, xend = 2.4, yend = 18), linetype = 2) + # calmness
geom_segment(aes(x = 1.6, y = 3, xend = 2.4, yend = 3), linetype = 2) +
geom_segment(aes(x = 2.6, y = 12, xend = 3.4, yend = 12), linetype = 2) + # social resistance
geom_segment(aes(x = 2.6, y = 2, xend = 3.4, yend = 2), linetype = 2) +
geom_segment(aes(x = 3.6, y = 18, xend = 4.4, yend = 18), linetype = 2) + # focus
geom_segment(aes(x = 3.6, y = 3, xend = 4.4, yend = 3), linetype = 2) +
geom_segment(aes(x = 4.6, y = 12, xend = 5.4, yend = 12), linetype = 2) + # planning
geom_segment(aes(x = 4.6, y = 2, xend = 5.4, yend = 2), linetype = 2) +
geom_segment(aes(x = 5.6, y = 12, xend = 6.4, yend = 12), linetype = 2) + # deviance
geom_segment(aes(x = 5.6, y = 2, xend = 6.4, yend = 2), linetype = 2)
p
## code of Valentin_Stefan to edit colors of facet boxes:
# https://stackoverflow.com/questions/53455092/r-ggplot2-change-colour-of-font-and-background-in-facet-strip
# Generate the ggplot2 plot grob
g <- grid.force(ggplotGrob(p))
# Get the names of grobs and their gPaths into a data.frame structure
grobs_df <- do.call(cbind.data.frame, grid.ls(g, print = FALSE))
# Build optimal gPaths that will be later used to identify grobs and edit them
grobs_df$gPath_full <- paste(grobs_df$gPath, grobs_df$name, sep = "::")
grobs_df$gPath_full <- gsub(pattern = "layout::",
replacement = "",
x = grobs_df$gPath_full,
fixed = TRUE)
# Get the gPaths of the strip background grobs
strip_bg_gpath <- grobs_df$gPath_full[grepl(pattern = ".*strip\\.background.*",
x = grobs_df$gPath_full)]
strip_bg_gpath[1]
strip_txt_gpath <- grobs_df$gPath_full[grepl(pattern = "strip.*titleGrob.*text.*",
x = grobs_df$gPath_full)]
strip_txt_gpath[1] # example of a gPath for strip title
## [1] "strip-t-1.7-5-7-5::strip.1-1-1-1::GRID.titleGrob.5368::GRID.text.5364"
# Generate some color
n_cols <- length(strip_bg_gpath)
fills <- c("#FFC000", "#5B9BD5", "#E7E6E6")
# Edit the grobs
for (i in 1:length(strip_bg_gpath)){
g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i]))
}
# Draw the edited plot
grid.newpage(); grid.draw(g)
plot_DSQ <- g
ggsave(filename = "data/results/figures/DSQ.png", g,
dpi = 500, width = 10, height = 3, units = "in", device='png', bg = "transparent")
rm(list = setdiff(ls(), c("vorbefragung", "nachbefragung", "nach_L2only", "fun_mean", "fun_median", "mean_Sim", "Sim_skim",
"plot_TiA_all_scales", "TiA",
"plot_CTAM_all_scales", "CTAM",
"plot_NDRT_all_scales", "NDRT",
"plot_L2components", "L2compo",
"plot_monitoring",
"plot_setting",
"Warn", "plot_Warn",
"Reak", "plot_Reak",
"plot_age",
"plot_license",
"plot_DSQ", "DSQ")))
#### plot ATI-S ####
plot_ATIS <- ggplot(vorbefragung, aes(x = group, y=ATIS, fill = group)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(1,6), breaks = seq(1,6,1)) +
scale_fill_manual(values = c("#FFC000", "#5B9BD5", "#E7E6E6")) +
labs(y="Score") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
panel.grid.major.x = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "sans", color="black", size=11, face = "plain"),
legend.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
plot_ATIS
ggsave(filename = "data/results/figures/ATI-S.png", plot_ATIS,
dpi = 500, width = 3, height = 3, units = "in", device='png', bg = "transparent")
rm(list = setdiff(ls(), c("vorbefragung", "nachbefragung", "nach_L2only", "fun_mean", "fun_median", "mean_Sim", "Sim_skim",
"plot_TiA_all_scales", "TiA",
"plot_CTAM_all_scales", "CTAM",
"plot_NDRT_all_scales", "NDRT",
"plot_L2components", "L2compo",
"plot_monitoring",
"plot_setting",
"Warn", "plot_Warn",
"Reak", "plot_Reak",
"plot_age",
"plot_license",
"plot_DSQ", "DSQ",
"plot_ATIS")))
#### plot driving frequency ####
labels_frequency <- c("(seldom or)\nnever", "< 1x/month", "> 1x/month",
"> 1x/week", "daily")
frequency_general <- vorbefragung %>%
select(group, VPNr, Fahrtfrequenz) %>%
rename(score = Fahrtfrequenz) %>%
add_column(scale = "general", .after = "VPNr")
frequency_highway <- vorbefragung %>%
select(group, VPNr, FrequenzAutobahn) %>%
rename(score = FrequenzAutobahn) %>%
add_column(scale = "highway", .after = "VPNr")
frequency <- bind_rows(frequency_general, frequency_highway)#  %>%
# mutate(scale = factor(scale, levels = c("general", "highway"), ordered = TRUE))
## basic plot ##
p <- ggplot(frequency, aes(x=scale, y=score, fill=scale)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(0,4), breaks = seq(0,4,1), labels = labels_frequency) +
facet_wrap(~group) +
scale_fill_manual(values = c("#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE")) +
labs(y="Score", x="") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
legend.position = "none",
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.text.x=element_text(color = "black", size=9, angle=00, vjust=.88, face = "plain"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
p
## code of Valentin_Stefan to edit colors of facet boxes:
# https://stackoverflow.com/questions/53455092/r-ggplot2-change-colour-of-font-and-background-in-facet-strip
# Generate the ggplot2 plot grob
g <- grid.force(ggplotGrob(p))
# Get the names of grobs and their gPaths into a data.frame structure
grobs_df <- do.call(cbind.data.frame, grid.ls(g, print = FALSE))
# Build optimal gPaths that will be later used to identify grobs and edit them
grobs_df$gPath_full <- paste(grobs_df$gPath, grobs_df$name, sep = "::")
grobs_df$gPath_full <- gsub(pattern = "layout::",
replacement = "",
x = grobs_df$gPath_full,
fixed = TRUE)
# Get the gPaths of the strip background grobs
strip_bg_gpath <- grobs_df$gPath_full[grepl(pattern = ".*strip\\.background.*",
x = grobs_df$gPath_full)]
strip_bg_gpath[1]
strip_txt_gpath <- grobs_df$gPath_full[grepl(pattern = "strip.*titleGrob.*text.*",
x = grobs_df$gPath_full)]
strip_txt_gpath[1] # example of a gPath for strip title
## [1] "strip-t-1.7-5-7-5::strip.1-1-1-1::GRID.titleGrob.5368::GRID.text.5364"
# Generate some color
n_cols <- length(strip_bg_gpath)
fills <- c("#FFC000", "#5B9BD5", "#E7E6E6")
# Edit the grobs
for (i in 1:length(strip_bg_gpath)){
g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i]))
}
# Draw the edited plot
grid.newpage(); grid.draw(g)
plot_frequency <- g
ggsave(filename = "data/results/figures/Frequency.png", g,
dpi = 500, width = 5, height = 3, units = "in", device='png', bg = "transparent")
rm(list = setdiff(ls(), c("vorbefragung", "nachbefragung", "nach_L2only", "fun_mean", "fun_median", "mean_Sim", "Sim_skim",
"plot_TiA_all_scales", "TiA",
"plot_CTAM_all_scales", "CTAM",
"plot_NDRT_all_scales", "NDRT",
"plot_L2components", "L2compo",
"plot_monitoring",
"plot_setting",
"Warn", "plot_Warn",
"Reak", "plot_Reak",
"plot_age",
"plot_license",
"plot_DSQ", "DSQ",
"plot_ATIS",
"plot_frequency", "frequency")))
#### plot mileage ####
labels_mileage <- c("0 km", "1 km -\n5.000 km", "5.001 km -\n20.000 km", "20.001 km -\n50.000 km",
"50.001 km -\n100.000 km", "> 100.000 km")
mileage_general <- vorbefragung %>%
select(group, VPNr, Fahrtstrecke) %>%
rename(score = Fahrtstrecke) %>%
add_column(scale = "general", .after = "VPNr")
mileage_highway <- vorbefragung %>%
select(group, VPNr, StreckeAutobahn) %>%
rename(score = StreckeAutobahn) %>%
add_column(scale = "highway", .after = "VPNr")
mileage <- bind_rows(mileage_general, mileage_highway) # %>%
# mutate(scale = factor(scale, levels = c("general", "highway"), ordered = TRUE))
## basic plot ##
p <- ggplot(mileage, aes(x=scale, y=score, fill=scale)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(0,5), breaks = seq(0,5,1), labels = labels_mileage) +
facet_wrap(~group) +
scale_fill_manual(values = c("#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE")) +
labs(y="Score", x="") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
legend.position = "none",
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.text.x=element_text(color = "black", size=9, angle=00, vjust=.88, face = "plain"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
p
## code of Valentin_Stefan to edit colors of facet boxes:
# https://stackoverflow.com/questions/53455092/r-ggplot2-change-colour-of-font-and-background-in-facet-strip
# Generate the ggplot2 plot grob
g <- grid.force(ggplotGrob(p))
# Get the names of grobs and their gPaths into a data.frame structure
grobs_df <- do.call(cbind.data.frame, grid.ls(g, print = FALSE))
# Build optimal gPaths that will be later used to identify grobs and edit them
grobs_df$gPath_full <- paste(grobs_df$gPath, grobs_df$name, sep = "::")
grobs_df$gPath_full <- gsub(pattern = "layout::",
replacement = "",
x = grobs_df$gPath_full,
fixed = TRUE)
# Get the gPaths of the strip background grobs
strip_bg_gpath <- grobs_df$gPath_full[grepl(pattern = ".*strip\\.background.*",
x = grobs_df$gPath_full)]
strip_bg_gpath[1]
strip_txt_gpath <- grobs_df$gPath_full[grepl(pattern = "strip.*titleGrob.*text.*",
x = grobs_df$gPath_full)]
strip_txt_gpath[1] # example of a gPath for strip title
## [1] "strip-t-1.7-5-7-5::strip.1-1-1-1::GRID.titleGrob.5368::GRID.text.5364"
# Generate some color
n_cols <- length(strip_bg_gpath)
fills <- c("#FFC000", "#5B9BD5", "#E7E6E6")
# Edit the grobs
for (i in 1:length(strip_bg_gpath)){
g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i]))
}
# Draw the edited plot
grid.newpage(); grid.draw(g)
plot_mileage <- g
ggsave(filename = "data/results/figures/Mileage.png", g,
dpi = 500, width = 6, height = 3, units = "in", device='png', bg = "transparent")
rm(list = setdiff(ls(), c("vorbefragung", "nachbefragung", "nach_L2only", "fun_mean", "fun_median", "mean_Sim", "Sim_skim",
"plot_TiA_all_scales", "TiA",
"plot_CTAM_all_scales", "CTAM",
"plot_NDRT_all_scales", "NDRT",
"plot_L2components", "L2compo",
"plot_monitoring",
"plot_setting",
"Warn", "plot_Warn",
"Reak", "plot_Reak",
"plot_age",
"plot_license",
"plot_DSQ", "DSQ",
"plot_ATIS",
"plot_frequency", "frequency",
"plot_mileage", "mileage")))
#### plot familiarity with ADAS ####
labels_ADAS <- c("unknown", "known, but\nnever used", "seldomly\nused", "used\nregularly")
ADAS_CC <- vorbefragung %>%
select(group, VPNr, KenntnisAS.CC.) %>%
rename(score = KenntnisAS.CC.) %>%
add_column(scale = "CC", .after = "VPNr")
ADAS_ACC <- vorbefragung %>%
select(group, VPNr, KenntnisAS.ACC.) %>%
rename(score = KenntnisAS.ACC.) %>%
add_column(scale = "ACC", .after = "VPNr")
ADAS_LKA <- vorbefragung %>%
select(group, VPNr, KenntnisAS.Spurhalte.) %>%
rename(score = KenntnisAS.Spurhalte.) %>%
add_column(scale = "LKA", .after = "VPNr")
ADAS_TJA <- vorbefragung %>%
select(group, VPNr, KenntnisAS.Stauassistent.) %>%
rename(score = KenntnisAS.Stauassistent.) %>%
add_column(scale = "TJA", .after = "VPNr")
ADAS_PA <- vorbefragung %>%
select(group, VPNr, KenntnisAS.ParkAssist.) %>%
rename(score = KenntnisAS.ParkAssist.) %>%
add_column(scale = "PA", .after = "VPNr")
ADAS_L2 <- vorbefragung %>%
select(group, VPNr, KenntnisAS.Teilautomation.) %>%
rename(score = KenntnisAS.Teilautomation.) %>%
add_column(scale = "L2", .after = "VPNr")
ADAS <- bind_rows(ADAS_CC, ADAS_ACC, ADAS_LKA, ADAS_TJA, ADAS_PA, ADAS_L2)  %>%
mutate(scale = factor(scale, levels = c("CC", "ACC", "LKA", "TJA", "PA", "L2"), ordered = TRUE))
## basic plot ##
p <- ggplot(ADAS, aes(x=scale, y=score, fill=scale)) +
stat_boxplot(geom ='errorbar', width = 0.3, lwd=0.2) +
geom_boxplot(outlier.shape = 21, lwd=0.2, outlier.size = 0.7) +
stat_summary(fun = mean, geom = "point" , colour="black", size=1, shape = 4) +
scale_y_continuous(limits = c(0,3), breaks = seq(0,3,1), labels = labels_ADAS) +
facet_wrap(~group) +
scale_fill_manual(values = c("#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE", "#D0CECE")) +
labs(y="Score", x="") +
theme_bw() +
theme(text=element_text(family = "sans", color="black", size=11, face = "bold"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size = 0.2),
legend.position = "none",
plot.background = element_rect(fill = "transparent",
colour = NA_character_),
axis.text.x=element_text(color = "black", size=9, angle=00, vjust=.88, face = "plain"),
axis.text.y=element_text(color = "black", size=9, face = "plain"))
p
## code of Valentin_Stefan to edit colors of facet boxes:
# https://stackoverflow.com/questions/53455092/r-ggplot2-change-colour-of-font-and-background-in-facet-strip
# Generate the ggplot2 plot grob
g <- grid.force(ggplotGrob(p))
# Get the names of grobs and their gPaths into a data.frame structure
grobs_df <- do.call(cbind.data.frame, grid.ls(g, print = FALSE))
# Build optimal gPaths that will be later used to identify grobs and edit them
grobs_df$gPath_full <- paste(grobs_df$gPath, grobs_df$name, sep = "::")
grobs_df$gPath_full <- gsub(pattern = "layout::",
replacement = "",
x = grobs_df$gPath_full,
fixed = TRUE)
# Get the gPaths of the strip background grobs
strip_bg_gpath <- grobs_df$gPath_full[grepl(pattern = ".*strip\\.background.*",
x = grobs_df$gPath_full)]
strip_bg_gpath[1]
strip_txt_gpath <- grobs_df$gPath_full[grepl(pattern = "strip.*titleGrob.*text.*",
x = grobs_df$gPath_full)]
strip_txt_gpath[1] # example of a gPath for strip title
## [1] "strip-t-1.7-5-7-5::strip.1-1-1-1::GRID.titleGrob.5368::GRID.text.5364"
# Generate some color
n_cols <- length(strip_bg_gpath)
fills <- c("#FFC000", "#5B9BD5", "#E7E6E6")
# Edit the grobs
for (i in 1:length(strip_bg_gpath)){
g <- editGrob(grob = g, gPath = strip_bg_gpath[i], gp = gpar(fill = fills[i]))
}
# Draw the edited plot
grid.newpage(); grid.draw(g)
plot_ADAS <- g
ggsave(filename = "data/results/figures/ADAS.png", g,
dpi = 500, width = 10, height = 3, units = "in", device='png', bg = "transparent")
rm(list = setdiff(ls(), c("vorbefragung", "nachbefragung", "nach_L2only", "fun_mean", "fun_median", "mean_Sim", "Sim_skim",
"plot_TiA_all_scales", "TiA",
"plot_CTAM_all_scales", "CTAM",
"plot_NDRT_all_scales", "NDRT",
"plot_L2components", "L2compo",
"plot_monitoring",
"plot_setting",
"Warn", "plot_Warn",
"Reak", "plot_Reak",
"plot_age",
"plot_license",
"plot_DSQ", "DSQ",
"plot_ATIS",
"plot_frequency", "frequency",
"plot_mileage", "mileage",
"plot_ADAS", "ADAS")))
