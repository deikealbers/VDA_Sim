# Load packages ####
library(readxl)
library(psych)
# Define function for Wilcoxon effect size r ####
rFromWilcox <- function(wilcoxModel, N){
z <- qnorm(wilcoxModel$p.value/2)
r <- z/ sqrt(N)
cat(wilcoxModel$data.name, 'Effect Size, r = ', r)
}
# Import data ####
data_ped <- read_excel("R/3D_zebra/Wilcoxon_data.xlsx", sheet = "Pedestrians")
data_dri <- read_excel("R/3D_zebra/Wilcoxon_data.xlsx", sheet = "Drivers")
# Wilcoxon-Tests ####
wilcoxPed <- wilcox.test(Pedestrians~Cat, data = data_ped, paired = TRUE, conf.int = FALSE, correct= FALSE, na.action = na.exclude)
describeBy(data_ped$Pedestrians, data_ped$Cat)
boxplot(Pedestrians~Cat, data=data_ped)
wilcoxPed
rFromWilcox(wilcoxPed, 402)
wilcoxDri <- wilcox.test(Drivers~Cat, data = data_dri, paired =TRUE, conf.int = FALSE, correct= FALSE, na.action = na.exclude)
describeBy(data_dri$Drivers, data_dri$Cat)
boxplot(Drivers~Cat, data=data_dri)
wilcoxDri
rFromWilcox(wilcoxDri, 204)
getwd()
setwd("C:/Users/ga84kuj/Documents/")
getwd()
# Load packages ####
librgetary(readxl)
library(psych)
# Define function for Wilcoxon effect size r ####
rFromWilcox <- function(wilcoxModel, N){
z <- qnorm(wilcoxModel$p.value/2)
r <- z/ sqrt(N)
cat(wilcoxModel$data.name, 'Effect Size, r = ', r)
}
# Import data ####
data_ped <- read_excel("R/3D_zebra/Wilcoxon_data.xlsx", sheet = "Pedestrians")
data_dri <- read_excel("R/3D_zebra/Wilcoxon_data.xlsx", sheet = "Drivers")
# Load packages ####
library(readxl)
library(psych)
#### set directory ####
setwd("C:/Users/ga84kuj/Documents/")
# Define function for Wilcoxon effect size r ####
rFromWilcox <- function(wilcoxModel, N){
z <- qnorm(wilcoxModel$p.value/2)
r <- z/ sqrt(N)
cat(wilcoxModel$data.name, 'Effect Size, r = ', r)
}
# Import data ####
data_ped <- read_excel("R/3D_zebra/Wilcoxon_data.xlsx", sheet = "Pedestrians")
data_dri <- read_excel("R/3D_zebra/Wilcoxon_data.xlsx", sheet = "Drivers")
# Wilcoxon-Tests ####
wilcoxPed <- wilcox.test(Pedestrians~Cat, data = data_ped, paired = TRUE, conf.int = FALSE, correct= FALSE, na.action = na.exclude)
describeBy(data_ped$Pedestrians, data_ped$Cat)
boxplot(Pedestrians~Cat, data=data_ped)
wilcoxPed
rFromWilcox(wilcoxPed, 402)
wilcoxDri <- wilcox.test(Drivers~Cat, data = data_dri, paired =TRUE, conf.int = FALSE, correct= FALSE, na.action = na.exclude)
describeBy(data_dri$Drivers, data_dri$Cat)
boxplot(Drivers~Cat, data=data_dri)
wilcoxDri
rFromWilcox(wilcoxDri, 204)
#### Old Code ####
# Q1	Do [drivers/you] slow down if [pedestrians/you] cross alone?
# Q2	Do [drivers/you] slow down if [pedestrians/you] cross in a group?
# Q3	How risky is it for [pedestrians/you] to cross this part of the road?
# Q4	Do you think this 3D crosswalk is safer than a normal crosswalk?
# Q5	Do you think this 3D crosswalk is safer than no crosswalk?
#
# # Wilcoxon-Tests:
# # not paired, no continuity correction, no confidence intervals, excluding N/A
# # Wilcoxon-Test Q1 ####
# # N = 201 + 102 = 303
# wilcoxQ1 <- wilcox.test(Q1~Group, data = data, paired = FALSE, conf.int = FALSE, correct= FALSE, na.action = na.exclude)
# describeBy(data$Q1, data$Group)
# boxplot(Q1~Group, data=data)
# wilcoxQ1
# rFromWilcox(wilcoxQ1, 303)
#
# # Wilcoxon-Test Q2 ####
# # N = 201 + 102 = 303
# wilcoxQ2 <- wilcox.test(Q2~Group, data = data, paired = FALSE, conf.int = FALSE, correct= FALSE, na.action = na.exclude)
# describeBy(data$Q2, data$Group)
# boxplot(Q2~Group, data=data)
# wilcoxQ2
# rFromWilcox(wilcoxQ2, 303)
#
# # Wilcoxon-Test Q3 ####
# # N = 201 + 102 = 303
# wilcoxQ3 <- wilcox.test(Q3~Group, data = data, paired = FALSE, conf.int = FALSE, correct= FALSE, na.action = na.exclude)
# describeBy(data$Q3, data$Group)
# boxplot(Q3~Group, data=data)
# wilcoxQ3
# rFromWilcox(wilcoxQ3, 303)
#
# # Wilcoxon-Test Q4 ####
# # N = 201 + 75 = 276
# wilcoxQ4 <- wilcox.test(Q4~Group, data = data, paired = FALSE, conf.int = FALSE, correct= FALSE, na.action = na.exclude)
# describeBy(data$Q4, data$Group)
# boxplot(Q4~Group, data=data)
# wilcoxQ4
# rFromWilcox(wilcoxQ4, 276)
#
# # Wilcoxon-Test Q5 ####
# # N = 201 + 75 = 276
# wilcoxQ5 <- wilcox.test(Q5~Group, data = data, paired = FALSE, conf.int = FALSE, correct= FALSE, na.action = na.exclude)
# describeBy(data$Q5, data$Group)
# boxplot(Q5~Group, data=data)
# wilcoxQ5
# rFromWilcox(wilcoxQ5, 276)
help wilcox.test()
wilcox.test()
drug<-gl(2, 10, labels = c("Ecstasy", "Alcohol"))
sundayBDI<-c(15, 35, 16, 18, 19, 17, 27, 16, 13, 20, 16, 15, 20, 15, 16, 13,
14, 19, 18, 18)
wedsBDI<-c(28, 35, 35, 24, 39, 32, 27, 29, 36, 35, 5, 6, 30, 8, 9, 7, 6, 17,
3, 10)
drugData<-data.frame(drug, sundayBDI, wedsBDI)
summary(drugData)
newModel<-wilcox.test(outcome ~ predictor, data = dataFrame, paired = FALSE/
TRUE)
sunModel
sunModel<-wilcox.test(sundayBDI ~ drug, data = drugData)
drug<-gl(2, 10, labels = c("Ecstasy", "Alcohol"))
sundayBDI<-c(15, 35, 16, 18, 19, 17, 27, 16, 13, 20, 16, 15, 20, 15, 16, 13, 14, 19, 18, 18)
wedsBDI<-c(28, 35, 35, 24, 39, 32, 27, 29, 36, 35, 5, 6, 30, 8, 9, 7, 6, 17, 3, 10)
drugData<-data.frame(drug, sundayBDI, wedsBDI)
sunModel<-wilcox.test(sundayBDI ~ drug, data = drugData)
sunModel
wedModel<-wilcox.test(wedsBDI ~ drug, data = drugData)
wedModel
# Load packages ####
library(readxl)
library(psych)
#### set directory ####
setwd("C:/Users/ga84kuj/Documents/")
# Define function for Wilcoxon effect size r ####
rFromWilcox <- function(wilcoxModel, N){
z <- qnorm(wilcoxModel$p.value/2)
r <- z/ sqrt(N)
cat(wilcoxModel$data.name, 'Effect Size, r = ', r)
}
# Import data ####
data_ped <- read_excel("R/3D_zebra/Wilcoxon_data.xlsx", sheet = "Pedestrians")
data_dri <- read_excel("R/3D_zebra/Wilcoxon_data.xlsx", sheet = "Drivers")
# Wilcoxon-Tests ####
wilcoxPed <- wilcox.test(Pedestrians~Cat, data = data_ped, paired = TRUE, conf.int = FALSE, correct= FALSE, na.action = na.exclude)
describeBy(data_ped$Pedestrians, data_ped$Cat)
boxplot(Pedestrians~Cat, data=data_ped)
wilcoxPed
rFromWilcox(wilcoxPed, 402)
sunModel<-wilcox.test(sundayBDI ~ drug, data = drugData)
sunModel
wedModel<-wilcox.test(wedsBDI ~ drug, data = drugData)
wedModel
# Wilcoxon-Tests ####
wilcoxPed <- wilcox.test(Pedestrians~Cat, data = data_ped, paired = TRUE)
wilcoxPed
wilcoxPed <- wilcox.test(Pedestrians~Cat, data = data_ped, paired = TRUE)
wilcoxPed
# Wilcoxon-Tests ####
wilcoxPed <- wilcox.test(Pedestrians~Cat, data = data_ped)
wilcoxPed
1
pitch = c(233,204,242,130,112,142)
sex = c(rep("female",3),rep("male",3))
my.df = data.frame(sex,pitch)
xmdl = lm(pitch ~ sex, my.df)
summary(xmdl)
age = c(14,23,35,48,52,67)
pitch = c(252,244,240,233,212,204)
my.df = data.frame(age,pitch)
xmdl = lm(pitch ~ age, my.df)
summary(xmdl)
plot(fitted(xmdl),residuals(xmdl))
#### preparations ####
rm(list = ls())
library(tidyverse)
library(ggplot2);
library(reshape)
library(lme4)
library(nlme)
setwd("~/R/Multilab_Analysis")
#### import data ####
data_all <- read.csv("data/preprocessed/multilab_subj_complete.csv", encoding = "UTF-8")
#### with VP ####
# ## adjust data set ##
#
# data_12_VP <- data_all %>%
#   filter(Exp != 3) %>%
#   mutate(Exp = case_when(
#     Exp == 1 ~ "e1",
#     Exp == 2 ~ "e2",
#     Exp == 3 ~ "e3",
#     TRUE ~ as.character(Exp))) %>%
#   mutate(Exp_name = Exp) %>%
#   mutate(VPNr = as.character(VPNr)) %>%
#   unite("VP", Exp_name,VPNr) %>%
#   mutate(Exp = factor(Exp)) %>%
#   mutate(HMI = factor(HMI)) %>%
#   dplyr::select(c(Exp, HMI, VP, ends_with("_ER")))
#
# names(data_12_VP) <- c("Exp", "HMI", "VP", "TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12")
#
# ## restructure for long format
# data_12_VP_l<-melt(data_12_VP, id = c("Exp", "HMI", "VP"), measured = c("TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12"))
# names(data_12_VP_l) <-c("Exp", "HMI", "VP", "TC", "ER_score")
#
# ## models
# model =  lmer(ER_score ~ Exp +  HMI + (1|VP) + (1|TC),
#               data=data_12_VP_l,
#               REML=FALSE)
# summary(model)
#
#
# model = lmer(ER_score ~ Exp +
#                HMI + (1+HMI|VP) +
#                (1+HMI|TC),
#              data=data_12_VP_l,
#              REML=FALSE)
# summary(model)
#
# # politeness.model2 = lmer(frequency ~ attitude + gender +
# #                            (1|subject) + (1|scenario), data=politeness)
# # summary(politeness.model2)
# ###
# model_interceptOnly <- gls(ER_score ~ 1, data = data_12_VP_l, method = "ML")
# summary(model_interceptOnly)
#
# ###
# model_randominterceptOnly <-lme(ER_score ~ 1, data = data_12_VP_l, random = ~1|TC, method = "ML")
# summary(model_randominterceptOnly)
#
# anova(model_interceptOnly, model_randominterceptOnly)
#
# ###
# model_randominterceptHMI <-lme(ER_score ~ HMI, data = data_12_VP_l, random = ~1|TC, method = "ML")
# summary(model_randominterceptHMI)
#
# anova(model_randominterceptOnly, model_randominterceptHMI)
#
# ###
# model_randominterceptHMIExp <-lme(ER_score ~ HMI + Exp, data = data_12_VP_l, random = ~1|TC, method = "ML")
# summary(model_randominterceptHMIExp)
#
# anova(model_randominterceptHMI, model_randominterceptHMIExp)
#### sociodemographics gender + age included ####
## adjust data set ##
data_12 <- data_all %>%
filter(Exp != 3) %>%
mutate(Exp = case_when(
Exp == 1 ~ "e1",
Exp == 2 ~ "e2",
Exp == 3 ~ "e3",
TRUE ~ as.character(Exp))) %>%
mutate(Exp = factor(Exp)) %>%
mutate(HMI = factor(HMI)) %>%
dplyr::select(c(Exp, HMI, Alter, Geschlecht, ends_with("_ER")))
names(data_12) <- c("Exp", "HMI", "Alter", "Geschlecht", "TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12")
## restructure for long format
data_12_l<-melt(data_12, id = c("Exp", "HMI", "Alter", "Geschlecht"),
measured = c("TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12"))
names(data_12_l) <-c("Exp", "HMI", "Alter", "Geschlecht", "TC","ER_score")
### max model
model_max = lmerTest::lmer(ER_score ~ Exp * HMI +
(1|TC),
data=data_12_l,
REML=FALSE)
summary(model_max)
anova(model_max)
vor_sum <- read.csv("data/results/summary_vorbefragung_scores.csv", encoding = "UTF-8")
setwd("~/R/VDA_Sim")
vor_sum <- read.csv("data/results/summary_vorbefragung_scores.csv", encoding = "UTF-8")
vor_sum <- read.csv("data/results/summary_vorbefragung.csv", encoding = "UTF-8")
View(vor_sum)
