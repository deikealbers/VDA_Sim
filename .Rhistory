## L2PrivNutzung ##
# levene (homogeneity)
lev_L2Nutz1 <- leveneTest(L2PrivNutzung ~ group, data = nach_L2)
tab_lev_L2Nutz1 <- data.frame(matrix(unlist(lev_L2Nutz1), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_L2Nutz1) <- c_lev
# t-Test (equal variances)
tT_equal_L2Nutz1 <- t.test(nach_L2$L2PrivNutzung ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_L2Nutz1 <- data.frame(matrix(unlist(tT_equal_L2Nutz1), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_L2Nutz1) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_L2Nutz1 <- t.test(nach_L2$L2PrivNutzung ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_L2Nutz1 <- data.frame(matrix(unlist(tT_unequal_L2Nutz1), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_L2Nutz1) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$L2PrivNutzung ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_L2Nutz1 <- wilcox.test(L2PrivNutzung ~ group, data = nach_L2, exact = FALSE)
tab_wilc_L2Nutz1 <- data.frame(matrix(unlist(wilc_L2Nutz1), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_L2Nutz1) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_L2Nutz1$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r/ sqrt(1-wilc_r^2)
# create data frame
name <- c("L2PrivNutzung")
test_tabL2Nutz1 <- cbind(name,
tab_lev_L2Nutz1,
tab_tT_equal_L2Nutz1, tab_tT_unequal_L2Nutz1, tT_cD,
tab_wilc_L2Nutz1, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_L2Nutz1")))
## L2Komponenten.Laengs. ##
# levene (homogeneity)
lev_L2Nutz2 <- leveneTest(L2Komponenten.Laengs. ~ group, data = nach_L2)
tab_lev_L2Nutz2 <- data.frame(matrix(unlist(lev_L2Nutz2), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_L2Nutz2) <- c_lev
# t-Test (equal variances)
tT_equal_L2Nutz2 <- t.test(nach_L2$L2Komponenten.Laengs. ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_L2Nutz2 <- data.frame(matrix(unlist(tT_equal_L2Nutz2), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_L2Nutz2) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_L2Nutz2 <- t.test(nach_L2$L2Komponenten.Laengs. ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_L2Nutz2 <- data.frame(matrix(unlist(tT_unequal_L2Nutz2), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_L2Nutz2) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$L2Komponenten.Laengs. ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_L2Nutz2 <- wilcox.test(L2Komponenten.Laengs. ~ group, data = nach_L2, exact = FALSE)
tab_wilc_L2Nutz2 <- data.frame(matrix(unlist(wilc_L2Nutz2), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_L2Nutz2) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_L2Nutz2$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r / sqrt(1-wilc_r^2)
# create data frame
name <- c("L2Komponenten.Laengs.")
test_tabL2Nutz2 <- cbind(name,
tab_lev_L2Nutz2,
tab_tT_equal_L2Nutz2, tab_tT_unequal_L2Nutz2, tT_cD,
tab_wilc_L2Nutz2, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_L2Nutz2")))
## L2Komponenten.Quer. ##
# levene (homogeneity)
lev_L2Nutz3 <- leveneTest(L2Komponenten.Quer. ~ group, data = nach_L2)
tab_lev_L2Nutz3 <- data.frame(matrix(unlist(lev_L2Nutz3), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_L2Nutz3) <- c_lev
# t-Test (equal variances)
tT_equal_L2Nutz3 <- t.test(nach_L2$L2Komponenten.Quer. ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_L2Nutz3 <- data.frame(matrix(unlist(tT_equal_L2Nutz3), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_L2Nutz3) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_L2Nutz3 <- t.test(nach_L2$L2Komponenten.Quer. ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_L2Nutz3 <- data.frame(matrix(unlist(tT_unequal_L2Nutz3), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_L2Nutz3) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$L2Komponenten.Quer. ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_L2Nutz3 <- wilcox.test(L2Komponenten.Quer. ~ group, data = nach_L2, exact = FALSE)
tab_wilc_L2Nutz3 <- data.frame(matrix(unlist(wilc_L2Nutz3), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_L2Nutz3) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_L2Nutz3$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r / sqrt(1-wilc_r^2)
# create data frame
name <- c("L2Komponenten.Quer.")
test_tabL2Nutz3 <- cbind(name,
tab_lev_L2Nutz3,
tab_tT_equal_L2Nutz3, tab_tT_unequal_L2Nutz3, tT_cD,
tab_wilc_L2Nutz3, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_L2Nutz3")))
## L2Komponenten.Hoff. ##
# levene (homogeneity)
lev_L2Nutz4 <- leveneTest(L2Komponenten.Hoff. ~ group, data = nach_L2)
View(nachbefragung)
## TiA_overall ##
# levene (homogeneity)
lev_TiAov <- leveneTest(TiA_overall ~ group, data = nach_L2)
tab_lev_TiAov <- data.frame(matrix(unlist(lev_TiAov), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_TiAov) <- c_lev
# t-Test (equal variances)
tT_equal_TiAov <- t.test(nach_L2$TiA_overall ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_TiAov <- data.frame(matrix(unlist(tT_equal_TiAov), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_TiAov) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_TiAov <- t.test(nach_L2$TiA_overall ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_TiAov <- data.frame(matrix(unlist(tT_unequal_TiAov), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_TiAov) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$TiA_overall ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_TiAov <- wilcox.test(TiA_overall ~ group, data = nach_L2, exact = FALSE)
tab_wilc_TiAov <- data.frame(matrix(unlist(wilc_TiAov), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_TiAov) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_TiAov$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r / sqrt(1-wilc_r^2)
# create data frame
name <- c("TiA_overall")
test_tabTiAov <- cbind(name,
tab_lev_TiAov,
tab_tT_equal_TiAov, tab_tT_unequal_TiAov, tT_cD,
tab_wilc_TiAov, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_TiAov")))
#### gather test results ####
# combine data frames of tests
tests_nach0 <- bind_rows(test_tabWarn1, test_tabWarn2, test_tabWarn3, test_tabWarn4,
test_tabReak1, test_tabReak2, test_tabReak3, test_tabReak4,
test_tab_L2Nutz1, test_tab_L2Nutz2, test_tab_L2Nutz3,
test_tab_TiAov
)
#### gather test results ####
# combine data frames of tests
tests_nach0 <- bind_rows(test_tabWarn1, test_tabWarn2, test_tabWarn3, test_tabWarn4,
test_tabReak1, test_tabReak2, test_tabReak3, test_tabReak4,
test_tabL2Nutz1, test_tabL2Nutz2, test_tabL2Nutz3,
test_tabTiAov
)
tests_nach <- tests_nach0 %>%
select(-c(lev_x1, lev_x2,
ends_with("nullvalue"),
ends_with("hypothesis"),
ends_with("variables")))
View(tests_nach)
## L2PrivNutzung ##
# levene (homogeneity)
lev_L2Nutz1 <- leveneTest(L2PrivNutzung ~ group, data = nach_L2)
tab_lev_L2Nutz1 <- data.frame(matrix(unlist(lev_L2Nutz1), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_L2Nutz1) <- c_lev
# t-Test (equal variances)
tT_equal_L2Nutz1 <- t.test(nach_L2$L2PrivNutzung ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_L2Nutz1 <- data.frame(matrix(unlist(tT_equal_L2Nutz1), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_L2Nutz1) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_L2Nutz1 <- t.test(nach_L2$L2PrivNutzung ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_L2Nutz1 <- data.frame(matrix(unlist(tT_unequal_L2Nutz1), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_L2Nutz1) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$L2PrivNutzung ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_L2Nutz1 <- wilcox.test(L2PrivNutzung ~ group, data = nach_L2, exact = FALSE)
tab_wilc_L2Nutz1 <- data.frame(matrix(unlist(wilc_L2Nutz1), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_L2Nutz1) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_L2Nutz1$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r/ sqrt(1-wilc_r^2)
# create data frame
name <- c("L2PrivNutzung")
test_tabL2Nutz1 <- cbind(name,
tab_lev_L2Nutz1,
tab_tT_equal_L2Nutz1, tab_tT_unequal_L2Nutz1, tT_cD,
tab_wilc_L2Nutz1, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_L2Nutz1")))
## L2Komponenten.Laengs. ##
# levene (homogeneity)
lev_L2Nutz2 <- leveneTest(L2Komponenten.Laengs. ~ group, data = nach_L2)
tab_lev_L2Nutz2 <- data.frame(matrix(unlist(lev_L2Nutz2), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_L2Nutz2) <- c_lev
# t-Test (equal variances)
tT_equal_L2Nutz2 <- t.test(nach_L2$L2Komponenten.Laengs. ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_L2Nutz2 <- data.frame(matrix(unlist(tT_equal_L2Nutz2), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_L2Nutz2) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_L2Nutz2 <- t.test(nach_L2$L2Komponenten.Laengs. ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_L2Nutz2 <- data.frame(matrix(unlist(tT_unequal_L2Nutz2), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_L2Nutz2) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$L2Komponenten.Laengs. ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_L2Nutz2 <- wilcox.test(L2Komponenten.Laengs. ~ group, data = nach_L2, exact = FALSE)
tab_wilc_L2Nutz2 <- data.frame(matrix(unlist(wilc_L2Nutz2), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_L2Nutz2) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_L2Nutz2$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r / sqrt(1-wilc_r^2)
# create data frame
name <- c("L2Komponenten.Laengs.")
test_tabL2Nutz2 <- cbind(name,
tab_lev_L2Nutz2,
tab_tT_equal_L2Nutz2, tab_tT_unequal_L2Nutz2, tT_cD,
tab_wilc_L2Nutz2, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_L2Nutz2")))
## L2Komponenten.Quer. ##
# levene (homogeneity)
lev_L2Nutz3 <- leveneTest(L2Komponenten.Quer. ~ group, data = nach_L2)
tab_lev_L2Nutz3 <- data.frame(matrix(unlist(lev_L2Nutz3), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_L2Nutz3) <- c_lev
# t-Test (equal variances)
tT_equal_L2Nutz3 <- t.test(nach_L2$L2Komponenten.Quer. ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_L2Nutz3 <- data.frame(matrix(unlist(tT_equal_L2Nutz3), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_L2Nutz3) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_L2Nutz3 <- t.test(nach_L2$L2Komponenten.Quer. ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_L2Nutz3 <- data.frame(matrix(unlist(tT_unequal_L2Nutz3), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_L2Nutz3) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$L2Komponenten.Quer. ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_L2Nutz3 <- wilcox.test(L2Komponenten.Quer. ~ group, data = nach_L2, exact = FALSE)
tab_wilc_L2Nutz3 <- data.frame(matrix(unlist(wilc_L2Nutz3), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_L2Nutz3) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_L2Nutz3$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r / sqrt(1-wilc_r^2)
# create data frame
name <- c("L2Komponenten.Quer.")
test_tabL2Nutz3 <- cbind(name,
tab_lev_L2Nutz3,
tab_tT_equal_L2Nutz3, tab_tT_unequal_L2Nutz3, tT_cD,
tab_wilc_L2Nutz3, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_L2Nutz3")))
#### 1x TiA overall score ####
## TiA_overall ##
# levene (homogeneity)
lev_TiAov <- leveneTest(TiA_overall ~ group, data = nach_L2)
tab_lev_TiAov <- data.frame(matrix(unlist(lev_TiAov), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_TiAov) <- c_lev
# t-Test (equal variances)
tT_equal_TiAov <- t.test(nach_L2$TiA_overall ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_TiAov <- data.frame(matrix(unlist(tT_equal_TiAov), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_TiAov) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_TiAov <- t.test(nach_L2$TiA_overall ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_TiAov <- data.frame(matrix(unlist(tT_unequal_TiAov), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_TiAov) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$TiA_overall ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_TiAov <- wilcox.test(TiA_overall ~ group, data = nach_L2, exact = FALSE)
tab_wilc_TiAov <- data.frame(matrix(unlist(wilc_TiAov), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_TiAov) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_TiAov$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r / sqrt(1-wilc_r^2)
# create data frame
name <- c("TiA_overall")
test_tabTiAov <- cbind(name,
tab_lev_TiAov,
tab_tT_equal_TiAov, tab_tT_unequal_TiAov, tT_cD,
tab_wilc_TiAov, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_TiAov")))
#### 6x CTAM subscales (no overall score) ####
#### 1x System Understanding overall (not single questions) ####
## System_sum ##
# levene (homogeneity)
lev_SUscore <- leveneTest(System_sum ~ group, data = nach_L2)
tab_lev_SUscore <- data.frame(matrix(unlist(lev_SUscore), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_SUscore) <- c_lev
# t-Test (equal variances)
tT_equal_SUscore <- t.test(nach_L2$System_sum ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_SUscore <- data.frame(matrix(unlist(tT_equal_SUscore), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_SUscore) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_SUscore <- t.test(nach_L2$System_sum ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_SUscore <- data.frame(matrix(unlist(tT_unequal_SUscore), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_SUscore) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$System_sum ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_SUscore <- wilcox.test(System_sum ~ group, data = nach_L2, exact = FALSE)
tab_wilc_SUscore <- data.frame(matrix(unlist(wilc_SUscore), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_SUscore) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_SUscore$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r / sqrt(1-wilc_r^2)
# create data frame
name <- c("System_sum")
test_tabSUscore <- cbind(name,
tab_lev_SUscore,
tab_tT_equal_SUscore, tab_tT_unequal_SUscore, tT_cD,
tab_wilc_SUscore, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_SUscore")))
#### gather test results ####
# combine data frames of tests
tests_nach0 <- bind_rows(test_tabWarn1, test_tabWarn2, test_tabWarn3, test_tabWarn4,
test_tabReak1, test_tabReak2, test_tabReak3, test_tabReak4,
test_tabL2Nutz1, test_tabL2Nutz2, test_tabL2Nutz3,
test_tabTiAov,
test_tabSUscore
)
tests_nach <- tests_nach0 %>%
select(-c(lev_x1, lev_x2,
ends_with("nullvalue"),
ends_with("hypothesis"),
ends_with("variables")))
View(tests_nach)
## CTAM_PE ##
# levene (homogeneity)
lev_CTAM1 <- leveneTest(CTAM_PE ~ group, data = nach_L2)
tab_lev_CTAM1 <- data.frame(matrix(unlist(lev_CTAM1), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_CTAM1) <- c_lev
# t-Test (equal variances)
tT_equal_CTAM1 <- t.test(nach_L2$CTAM_PE ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_CTAM1 <- data.frame(matrix(unlist(tT_equal_CTAM1), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_CTAM1) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_CTAM1 <- t.test(nach_L2$CTAM_PE ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_CTAM1 <- data.frame(matrix(unlist(tT_unequal_CTAM1), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_CTAM1) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$CTAM_PE ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_CTAM1 <- wilcox.test(CTAM_PE ~ group, data = nach_L2, exact = FALSE)
tab_wilc_CTAM1 <- data.frame(matrix(unlist(wilc_CTAM1), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_CTAM1) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_CTAM1$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r/ sqrt(1-wilc_r^2)
# create data frame
name <- c("CTAM_PE")
test_tabCTAM1 <- cbind(name,
tab_lev_CTAM1,
tab_tT_equal_CTAM1, tab_tT_unequal_CTAM1, tT_cD,
tab_wilc_CTAM1, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_CTAM1")))
## CTAM_EE ##
# levene (homogeneity)
lev_CTAM2 <- leveneTest(CTAM_EE ~ group, data = nach_L2)
tab_lev_CTAM2 <- data.frame(matrix(unlist(lev_CTAM2), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_CTAM2) <- c_lev
# t-Test (equal variances)
tT_equal_CTAM2 <- t.test(nach_L2$CTAM_EE ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_CTAM2 <- data.frame(matrix(unlist(tT_equal_CTAM2), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_CTAM2) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_CTAM2 <- t.test(nach_L2$CTAM_EE ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_CTAM2 <- data.frame(matrix(unlist(tT_unequal_CTAM2), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_CTAM2) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$CTAM_EE ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_CTAM2 <- wilcox.test(CTAM_EE ~ group, data = nach_L2, exact = FALSE)
tab_wilc_CTAM2 <- data.frame(matrix(unlist(wilc_CTAM2), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_CTAM2) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_CTAM2$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r / sqrt(1-wilc_r^2)
# create data frame
name <- c("CTAM_EE")
test_tabCTAM2 <- cbind(name,
tab_lev_CTAM2,
tab_tT_equal_CTAM2, tab_tT_unequal_CTAM2, tT_cD,
tab_wilc_CTAM2, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_CTAM2")))
## CTAM_ATT ##
# levene (homogeneity)
lev_CTAM3 <- leveneTest(CTAM_ATT ~ group, data = nach_L2)
tab_lev_CTAM3 <- data.frame(matrix(unlist(lev_CTAM3), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_CTAM3) <- c_lev
# t-Test (equal variances)
tT_equal_CTAM3 <- t.test(nach_L2$CTAM_ATT ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_CTAM3 <- data.frame(matrix(unlist(tT_equal_CTAM3), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_CTAM3) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_CTAM3 <- t.test(nach_L2$CTAM_ATT ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_CTAM3 <- data.frame(matrix(unlist(tT_unequal_CTAM3), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_CTAM3) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$CTAM_ATT ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_CTAM3 <- wilcox.test(CTAM_ATT ~ group, data = nach_L2, exact = FALSE)
tab_wilc_CTAM3 <- data.frame(matrix(unlist(wilc_CTAM3), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_CTAM3) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_CTAM3$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r / sqrt(1-wilc_r^2)
# create data frame
name <- c("CTAM_ATT")
test_tabCTAM3 <- cbind(name,
tab_lev_CTAM3,
tab_tT_equal_CTAM3, tab_tT_unequal_CTAM3, tT_cD,
tab_wilc_CTAM3, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_CTAM3")))
## CTAM_FC ##
# levene (homogeneity)
lev_CTAM4 <- leveneTest(CTAM_FC ~ group, data = nach_L2)
tab_lev_CTAM4 <- data.frame(matrix(unlist(lev_CTAM4), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_CTAM4) <- c_lev
# t-Test (equal variances)
tT_equal_CTAM4 <- t.test(nach_L2$CTAM_FC ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_CTAM4 <- data.frame(matrix(unlist(tT_equal_CTAM4), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_CTAM4) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_CTAM4 <- t.test(nach_L2$CTAM_FC ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_CTAM4 <- data.frame(matrix(unlist(tT_unequal_CTAM4), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_CTAM4) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$CTAM_FC ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_CTAM4 <- wilcox.test(CTAM_FC ~ group, data = nach_L2, exact = FALSE)
tab_wilc_CTAM4 <- data.frame(matrix(unlist(wilc_CTAM4), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_CTAM4) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_CTAM4$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r / sqrt(1-wilc_r^2)
# create data frame
name <- c("CTAM_FC")
test_tabCTAM4 <- cbind(name,
tab_lev_CTAM4,
tab_tT_equal_CTAM4, tab_tT_unequal_CTAM4, tT_cD,
tab_wilc_CTAM4, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_CTAM4")))
## CTAM_ITU ##
# levene (homogeneity)
lev_CTAM5 <- leveneTest(CTAM_ITU ~ group, data = nach_L2)
tab_lev_CTAM5 <- data.frame(matrix(unlist(lev_CTAM5), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_CTAM5) <- c_lev
# t-Test (equal variances)
tT_equal_CTAM5 <- t.test(nach_L2$CTAM_ITU ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_CTAM5 <- data.frame(matrix(unlist(tT_equal_CTAM5), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_CTAM5) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_CTAM5 <- t.test(nach_L2$CTAM_ITU ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_CTAM5 <- data.frame(matrix(unlist(tT_unequal_CTAM5), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_CTAM5) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$CTAM_ITU ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_CTAM5 <- wilcox.test(CTAM_ITU ~ group, data = nach_L2, exact = FALSE)
tab_wilc_CTAM5 <- data.frame(matrix(unlist(wilc_CTAM5), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_CTAM5) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_CTAM5$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r/ sqrt(1-wilc_r^2)
# create data frame
name <- c("CTAM_ITU")
test_tabCTAM5 <- cbind(name,
tab_lev_CTAM5,
tab_tT_equal_CTAM5, tab_tT_unequal_CTAM5, tT_cD,
tab_wilc_CTAM5, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_CTAM5")))
## CTAM_PS ##
# levene (homogeneity)
lev_CTAM6 <- leveneTest(CTAM_PS ~ group, data = nach_L2)
tab_lev_CTAM6 <- data.frame(matrix(unlist(lev_CTAM6), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_CTAM6) <- c_lev
# t-Test (equal variances)
tT_equal_CTAM6 <- t.test(nach_L2$CTAM_PS ~ nach_L2$group, var.equal = TRUE, alternative = "two.sided")
tab_tT_equal_CTAM6 <- data.frame(matrix(unlist(tT_equal_CTAM6), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_equal_CTAM6) <- c_tT_eqvar
# t-Test (unequal variances)
tT_unequal_CTAM6 <- t.test(nach_L2$CTAM_PS ~ nach_L2$group, var.equal = FALSE, alternative = "two.sided")
tab_tT_unequal_CTAM6 <- data.frame(matrix(unlist(tT_unequal_CTAM6), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_tT_unequal_CTAM6) <- c_tT_uneqvar
# cohen's D effect size
tT_cD <- cohensD(nach_L2$CTAM_PS ~ nach_L2$group)
# wilcoxon / Mann Whitney U
wilc_CTAM6 <- wilcox.test(CTAM_PS ~ group, data = nach_L2, exact = FALSE)
tab_wilc_CTAM6 <- data.frame(matrix(unlist(wilc_CTAM6), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_wilc_CTAM6) <- c_wilc
# wilcoxon effect size
wilc_r <- abs(qnorm(wilc_CTAM6$p.value / 2)/sqrt(nrow(nach_L2)))
wilc_cD <- 2*wilc_r / sqrt(1-wilc_r^2)
# create data frame
name <- c("CTAM_PS")
test_tabCTAM6 <- cbind(name,
tab_lev_CTAM6,
tab_tT_equal_CTAM6, tab_tT_unequal_CTAM6, tT_cD,
tab_wilc_CTAM6, wilc_r, wilc_cD)
# delete all but test_tabXXX variable, name lists and data sets
rm(list = ls(pattern = ("_CTAM6")))
#### gather test results ####
# combine data frames of tests
tests_nach0 <- bind_rows(test_tabWarn1, test_tabWarn2, test_tabWarn3, test_tabWarn4,
test_tabReak1, test_tabReak2, test_tabReak3, test_tabReak4,
test_tabL2Nutz1, test_tabL2Nutz2, test_tabL2Nutz3,
test_tabTiAov,
test_tabCTAM1, test_tabCTAM2, test_tabCTAM3, test_tabCTAM4, test_tabCTAM5, test_tabCTAM6,
test_tabSUscore
)
tests_nach <- tests_nach0 %>%
select(-c(lev_x1, lev_x2,
ends_with("nullvalue"),
ends_with("hypothesis"),
ends_with("variables")))
#### remove not needed data ####
rm(list=setdiff(ls(), c("vorbefragung", "nachbefragung", "nach_L2",
"tests_nach")))
View(tests_nach)
View(tests_nach)
#### save results ####
write_excel_csv(tests_nach, "data/results/inferential_nachbefragung.csv")
